* General Stuff  
** DONE Handle this org mode file so we can use it! (as I am a org mode newbie) :-) :phon:  
** DONE Tide up project, makefiles.
** DONE List words in the fourk2.S file				       :phon:
* experiments
  Programs or whatever which help us to get an 
  understanding in something we are unsure if it 
  is a good thing.
** DONE program to TGA converter				       :phon:
** DONE manually getting rid of zero and compress it                   
   After compressing manualy the binary, the size is:
   1327 bytes. However this is only made by elf kickers tool, and not optimised yet.
   I think if we found another way of importing dynamic symbols we will have another 200 bytes.  
** DONE fourk2 -> png, grayscale converter			       :phon:
   SCHEDULED: <2009-09-24 Don>
   I'm just interested into how this kind of
   code looks like as a PNG image, to get a feeling
   if that looks like random data or something with
   a structure. I think it will look like something
   structured, which means we could atleast theoretically
   some form-finding compression algorithmens do it's
   magic.
   
* M4 Specific 
** TODO make M4 dict.m4 macro to work with divert() builtin 
   http://www.mkssoftware.com/docs/man1/m4.1.asp
   currently the macro collects all the words ptrs and names into separate macros and then at the end unrolls it.
   (please see BUILD_NAME_TABLE). We need to use divertions instead.   
* Forth Specific
** DONE Implement variables
** DONE implement comments					       :phon:
   SCHEDULED: <2009-09-26 Sam>
** DONE research how to define words with embeded comma inside	       :phon:
   SCHEDULED: <2009-09-23 Mit>
   ( i know it is stupid but who cares :-).
   So far I am trying to quote it, but it doesn't work for some reasons. 
   The best example is "c," word which happen to fail, 
   and also [ and ] (which are lb and rb respectively)
** DONE Bootstrap a basic Forth system				       :spec:
   The basic funcionality only that allows us to extend. 
   Including: compile/interpret state, immediate words, postpone, creation of words. 
** DONE Add more Forth words that cover basic stuff
   We need some basic functionality in place, need some more core words, and more FourK
   define words
** DONE Improve dictionary layout
   Get rid of both dispatch table - build at the runtime.
   Dictionary as a stream of bytes.
   Get rid of the leading address for each word.

** DONE Dynamic backpatch
** TODO Allow nesting of block comments
** TODO Different flavours of literals
   Byte signed, unsigned, dword. float?. Resolved at compile time.
** TODO Floating point stack
** TODO make some tests for whole enviroment
   We need to able to test coherency after each change
   - tests for Forth itself
   - for image linker
** TODO Loading imports
   Please see the design section. (What we don't know yet)
* Linker/Image Specific
** TODO Compile and make work tiny example with imports in the experiment directory
** TODO Integrate the tiny image example with existing GAS code
** DONE Dictionary optimiser, need first an improvement for dictionary layout.
** DONE Make preprocesor (linker) for images
   Basic functionality is there, although stripping zeroes and relocating the dict section is not implemented yet.
   (relocating the dispatch table works now, this proves that the method for finding relocations is correct)
** DONE Build a first executable image				       :spec:
   Only dumping to executable done, via save-image core word. No postprocessing or loading. 
** DONE Very simple load/execution of a saved image		       :spec:
   Done by ovewriting the actual image with a new one. 
   Requirment of having some code not loaded dynamically, especially symbols from
   dlls that are accessed directly (not through plt) (problem with the `stdin' variable).

** DONE Make a small program to dump out the places where the executable needs to be backpatched. 
  This will be in the form of builidng two versions of the same core FourK, and binary comparisions.
  Please not that we need that for automated backpatching, during saving the image.
** DONE Split code into logical sections, polish loader
   - Base interpreter code section - stripped off
   - Base runtime section
   - Core words section - preprocesor for the image should get rid of unused and immediate words 
   - User words section - same as above
   - Dispatch table section - same sa above
   - Names table section - stripped off
   - Semantic section - stripped off
* Compression Specific
** Research the best alorithm for compression
** Way of grouping data/code into segments at the Forth level
* First Intro Design
* Size considerations
** TODO Think how to make a smallest Linux executable ever,	     :design:
   with proper loading of dynamic symbols, how to do this without ld?
   
   Inspirations: 
   - http://www.muppetlabs.com/~breadbox/software/tiny/teensy.html1
     
     Did a initial prototype, went down to 1094 bytes, and still plenty of optimisations possible.
     Not counting that this is gzip.
** TODO Think about compressor					     :design:
   Maybe ripit from http://en.wikipedia.org/wiki/PAQ =)
** TODO Look at tiny.S
* What we don't know yet
  and what we do against that "not knowing"
** phon								       :phon:
*** M4
    I never really looked at it and now I know why
    -- phon
    
    yes, I do understand your point. Grab a useful link here
    http://mbreen.com/m4.html
    -- spec

**** TODO Reading m4 docs
     SCHEDULED: <2009-09-23 Mit>
*** x86
    The last time I played with it was more than a year
    before 
    -- phon
**** DONE Reading my x86 reference book       
     SCHEDULED: <2009-09-23 Mit>
** spec								       :spec:
*** x86
    Need to know about various size optimisations tips.
**** TODO Find a document about size optimisations

*** Forth
**** TODO Do we need local variables??
**** TODO How to handle imports?
   
**** TODO Setup a Gobby discussion
**** TODO Make up a prototype

* "Planning" of 4k
  DEADLINE: <2009-11-30 Mon>
  - I chose "Planning" because I haven't a better word 
    for it -- phon
  - I set the deadline to there we said, that this would 
    be our target -- phon
    
* Things which could slow down the project
** phon 
*** university
*** perhaps a part time job
** spec
*** looking for job
    If I find a full time job I might have less time
    I might be not avaiable everyday from 16-18
* org mode specific stuff
