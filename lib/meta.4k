| FourK - Concatenative, stack based, Forth like language optimised for
|        non-interactive 4KB size demoscene presentations.
|
| Copyright (C) 2009, 2010, 2011 Wojciech Meyer, Josef P. Bernhart
|
| This program is free software: you can redistribute it and/or modify
| it under the terms of the GNU General Public License as published by
| the Free Software Foundation, either version 3 of the License, or
| (at your option) any later version.
|
| This program is distributed in the hope that it will be useful,
| but WITHOUT ANY WARRANTY; without even the implied warranty of
| MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
| GNU General Public License for more details.
|
| You should have received a copy of the GNU General Public License
| along with this program.  If not, see <http://www.gnu.org/licenses/>.
| ______________________________________________________________________
|
| This stuff provides basic framework for runtime meta-programming
|

require" lib/stackx.4k"
require" lib/symbols.4k"

create token-table 512 allot 
variable ptr token-table ptr !
variable #tokens 0 #tokens !


| Bind some useful functions
Lib: libc.so
1 Symbol: malloc
1 Symbol: puts
LoadSymbols

| Copy string to malloced block

| : token token over over + 0 swap c! ;
: malloc-token ( cstr -- cstr )
    dup count dup 1+ malloc swap
    0 do over over swap i + c@ swap i + c! loop swap drop dup dup count + 0 swap c! ;
| Get token as Forth string 
: tok ( token -- str n ) dup c@ swap 1+ swap ;
|
| DeclareX
: declarex ( -- )
    here @ >r ptr @ here ! token dup c, 1-
    0 do dup i + c@ c, loop 0 c,
    here @ r> here !
    ptr @ tok 2dup (:) drop rliteral postpone malloc-token postpone >x postpone ; ptr ! 0 ptr @ c! #tokens 1+! ;
|
| Concat two malloced blocks, and create the third one
: concat-malloc ( str1 str2 -- str3 )
    dup count >r swap dup count r> 1+ + malloc ( str2 str1 str3 )
    dup >r here @ >r here ! dup count 1- 0  do dup i + c@ c, loop drop
    dup count 0  do dup i + c@ c, loop drop
    r> here ! r> ;
|
;
: malloc-c >r 2 malloc dup 1+ 0 swap c! dup r> swap c! ;
: malloc-c: key malloc-c ;
: malloc-nil 0 malloc-c ;
: malloc-space 32 malloc-c ;
: Type declarex ;
: Ident declarex ;
| Concat words on the X-stack
: |> x> x> concat-malloc >x  ;

Ident ala
: a ala ;
a
