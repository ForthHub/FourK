\ FourK - Concatenative, stack based, Forth like language optimised for 
\        non-interactive 4KB size demoscene presentations.

\ Copyright (C) 2009, 2010 Wojciech Meyer, Josef P. Bernhart

\ This program is free software: you can redistribute it and/or modify
\ it under the terms of the GNU General Public License as published by
\ the Free Software Foundation, either version 3 of the License, or
\ (at your option) any later version.

\ This program is distributed in the hope that it will be useful,
\ but WITHOUT ANY WARRANTY; without even the implied warranty of
\ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
\ GNU General Public License for more details.

\ You should have received a copy of the GNU General Public License
\ along with this program.  If not, see <http://www.gnu.org/licenses/>.
create s-stack
32 rcells allot 

variable #ptr


variable bytecode
: times ( num byetecode -- ) 
  bytecode ! >r begin r 0= if r> drop ;; then 
  bytecode @ execute r> 1- >r repeat 
;

| this reads next word and compiles or execute it
: times ( num -- ) ' state @ 0= if literal postpone times ;; then 
  times 
; immediate 

: push ( e -- ) s-stack #ptr @ rcells + ! #ptr @ 1+ 31 and #ptr ! ; 
: pop ( -- e ) #ptr @ 1- 31 and #ptr ! s-stack #ptr @ rcells + @ ; 

| pushes the given number of elements
: pushnum ( num -- ) times push ; 
: popnum ( num -- ) times pop ;

: tos ( n -- n ) dup . ;
: .pop ( -- ) pop tos ;
: .s ( -- ) 8 pushnum 8 times .pop ;

