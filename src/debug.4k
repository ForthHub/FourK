create s-stack
32 rcells allot 

variable #ptr


variable bytecode
: times ( num byetecode -- ) 
  bytecode ! >r begin r 0= if r> drop ;; then 
  bytecode @ execute r> 1- >r repeat 
;

| this reads next word and compiles or execute it
: times ( num -- ) ' state @ 0= if literal postpone times ;; then 
  times 
; immediate 

: push ( e -- ) s-stack #ptr @ rcells + ! #ptr @ 1+ 31 and #ptr ! ; 
: pop ( -- e ) #ptr @ 1- 31 and #ptr ! s-stack #ptr @ rcells + @ ; 

| pushes the given number of elements
: pushnum ( num -- ) times push ; 
: popnum ( num -- ) times pop ;

: tos ( n -- n ) dup . ;
: .pop ( -- ) pop tos ;
: .s ( -- ) 8 pushnum 8 times .pop ;

