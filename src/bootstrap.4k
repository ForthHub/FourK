create ; immediate postpone [ postpone lit -1 c, postpone c, 
create : postpone create postpone ] ;

: here@ here @ ;
: literal 0 c, c, ;
: rliteral 4 c, , ;

: begin here@ ; immediate
: repeat postpone branch here@ - c, ; immediate

: a begin 1 . 10 emit repeat ;

: if postpone branch0 here@ 0 c, ; immediate
: then dup here@ swap - swap c! ; immediate 

: | begin key 10 = if exit then repeat ; immediate

| TODO:
| we need to stay with line comments and shift below for later
| to make nesting possible with some loops

: ( begin key 41 = if exit then repeat ; immediate
: (* begin key 42 = if key 41 = if exit then then repeat ; immediate


| this is a retroforth one line comment
( this is a stack comment ) 
(* this
   should 
   be 
   a 
   multi line
   comment
*) 

| comparison words
: <> = invert ;
: 0= 0 = ;
: 0<> 0= invert ;
: <= > invert ;
: >= < invert ;


| output words
: cr 10 emit ;


| === a test routine === 
| : a 0 begin 1 + repeat ;

: a begin repeat ;
| a

| image saver 
| save-image image.4ki

| to verbose but will make optimisations later
| by default we will use byte cells, as it is meant to be 4kb tool
: cell 1 ;
: cells cell * ;
| ref cells
: rcell 4 ;

: allot there @ + there ! ;

: variable : there @ rliteral postpone ; rcell allot  ;

: test postpone ccall 0 c, ; immediate
: a 100 test  ;
a .

| : r ( -- r ) postpone r> postpone dup postpone >r ; immediate
| strings 
: " ( -- str c ) here @ >r there @ here ! 0 >r 
  begin key dup 34 = if drop there @ r> here @ there ! r> here ! exit then 
  c, r> 1 + >r repeat
;

: "" begin 1 . repeat ;

: t 0 >r r> drop ;

: type ( str c -- ) >r begin r> dup >r 0= if r> drop drop exit then r> 1 - >r dup c@ emit 1 + repeat ; 

5 1 - cr . cr

" fooo" type cr
