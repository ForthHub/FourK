create ; 
       postpone lit 1 c, postpone state postpone !
       postpone last 
       postpone @ 
       postpone lit 
       1 c, 
       postpone + 
       postpone last 
       postpone ! 

       postpone lit
       -1 c,
       postpone here 
       postpone @
       postpone c!

       -1 c, 
       
immediate

last @ 1 + last ! 

create : 
       postpone create 
       postpone lit 
       0 c, 
       postpone state 
       postpone ! 
;

: [ 1 state ! ; immediate
: ] 0 state ! ;

: here@ here @ ;
: literal 0 c, c, ;
: rliteral 1 c, , ;
: sliteral swap rliteral literal ; 

: begin here@ ; immediate
: repeat postpone branch here@ - c, immediate ;

: a begin 1 . 10 emit repeat ;

: if postpone branch0 here@ 0 c, ; immediate
: then dup here@ swap - swap c! ; immediate 


: | begin key 10 = if ;; then repeat ; immediate


: c: key state @ 0 = if literal then ; immediate

| TODO:
| we need to stay with line comments and shift below for later
| to make nesting possible with some loops

: ( begin key c: ) = if ;; then repeat ; immediate
: (* begin key c: * = if key c: ) = if ;; then then repeat ; immediate
(* 
a multi
line 
comment

*)

| comparison words
: <> = invert ;
: 0= 0 = ;
: 0<> 0= invert ;
: <= > invert ;
: >= < invert ;


| output words
: cr 10 emit ;


| === a test routine === 
| : a 0 begin 1 + repeat ;

: a begin repeat ;
| a

: 1+ 1 + ; 
: 1- 1 - ; 

: create create there @ rliteral -1 c, last @ 1 + last ! ; 

| image saver 
| save-image image.4ki

| to verbose but will make optimisations later
| by default we will use byte cells, as it is meant to be 4kb tool
: cell 1 ;
: cells cell * ;
| ref cells
: rcell 4 ;
: rcells rcell * ;
: rcells+ rcells + ;

: allot there @ + there ! ;

: variable : there @ rliteral postpone ; rcell allot  ;

: r ( -- r ) postpone r> postpone dup postpone >r ; immediate

| strings

create #str
256 allot
 

: " ( -- str c ) here @ >r #str here !
  begin key dup c: " = if #str here @ #str - 0 c, r> here ! ;; then 
  c, repeat
; immediate

: "" begin 1 . repeat ;

| inlines a counted list of bytes to there 
: inline ( str c -- str c ) here @ >r there @ here ! here @ + >r
  begin r here @ = if there @ r> there @ - here @ there ! r> here ! ;; then 
  dup c@ c, 1+ repeat 
;

: t 0 >r r> drop ;

: type ( str c -- ) >r begin 
  r 0= if r> drop drop ;; then 
  r> 1 - >r dup c@ emit 1 + repeat 
; 
5 . cr  " shit " type cr 

| pimped ", it now compiles the string to there @compile time
: " postpone " state @ 0 = if inline there @ dup 0 swap c! 1+ there ! 
   sliteral then 
; immediate 

: ." postpone " state @ 0 = if postpone type ;; then type ; immediate 

" foo" inline there @ 1- c@ emit cr     
" lulu" inline there @ 1- c@ emit cr . cr  

: ccall: : postpone ccall c, postpone ; ;

0 ccall: dlopen
1 ccall: dlsym
2 ccall: printf

: >cstr inline type drop ;

: lib >cstr 1 swap dlopen ;
: sym >cstr swap dlsym ;

10 . cr 
: l lib ;

" libc.so.6"  lib dup . cr  " printf" sym 
ithere @ 4 rcells+ !
4 ithere @ 5 rcells+ !



	
" FourK interaction started." >cstr printf cr
-1 c,
-1 c,
