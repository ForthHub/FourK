
(* 
	sections for the imports	
	------------------------

	As the imports have some kind of a 
	relational association of elements,
	they are are split into three sections
	one is for the names of libraries,
	another for the names of functions 
	and the last is for the relation
	between the two
*)
section libraries 
100 allot | why 100 bytes? because that's 5*20
          | I assumed, that a library name is about 20 bytes long

section functions 
512 allot

section relations
256 rcell * allot 

variable #functions
variable #libraries
variable relIndex


variable symbols-ptr | offset, let be offsets in the future begin with $
variable symbols

: symbol ( str c -- ) 
  there @ >r symbols-ptr @ there !  
  1+ inline 2drop there @ symbols-ptr ! r> there ! 0 symbols-ptr @ 1+ c!
;
 
: next-symbol ( symbol -- symbol+1 ) dup count + 1+ ; 
: in-section ( str c -- ) 
  find-section th table in :pointer @ symbols ! 
; 

: search ( str c -- index ) 0 >r symbols @ >r
  begin
   2dup r count 0 = if r> 2drop 2drop r> 2drop -1 ;; then 
   r dup count str= if 2drop r> drop r> ;; then 
    r> next-symbol r> 1+ >r >r       
  repeat 
;

: new-sym-in-section ( str c str c -- ) 
  find-section th table in >r r :pointer @ r :offset @ +  
  symbols-ptr ! symbol symbols-ptr @ r :pointer @ - r> :offset !
;

(* relations
   ---------
   consists of three valuse, one index of the lib section,
   one index of the func section and one stackfix

  stackfix | function index | library index

*)

2 rcell + const $relentry | size of a rel entry

: add-relation ( stackfix findx lindx -- ) 
  " relations" find-section th table in >r r :pointer @ r :offset @ + 
  r :offset @ $relentry + r> :offset ! there @ >r there ! 
  there: c, c, , ;there r> there ! 
;

: new-func ( str c -- ) 
  " functions" new-sym-in-section 
;


: new-lib ( str c -- ) 
  " libraries" new-sym-in-section  
;

: search-funcs ( str c -- index ) 
  " functions" in-section search 
;

: search-libs ( str c -- index )
  " libraries" in-section search
;

(* | test code
" foo" new-func
" and" new-func
" boom" new-func
" and-boom" new-func
" developers" new-func 

" functions" find-section th table in :pointer @ .  
" developers" search-funcs . 
*)

| standard settings, as WE NEED them

variable library | current library index, important for def. funcs

: lib: ( -- ) 
  token 2dup search-libs 
  dup -1 = if drop 2dup new-lib search-libs library ! ;; then 
  library ! 2drop 
;

: func: ( stackfix -- ) 
  token 2dup search-funcs dup 
  -1 = if drop 2dup new-func search-funcs library @ add-relation ;; then
  2drop drop 
;

lib: 4k
0 func: dlopen
0 func: dlsym

lib: libSDL.so
4 rcells func: SDL_SetVideoMode
rcell    func: SDL_Flip

| inlines a call to a function, if the function was imported
: call: ( -- ) 
  token search-funcs dup -1 = if drop ;; then postpone ccall c,
; immediate

variable libhandle

| returns the nth function symbol 
: nth-func ( n -- symbol ) 
  " functions" section-adr :pointer @ >r 0
  begin 
   r count 0 = if 2drop r> ;; then  
   2dup = if 2drop r> ;; then 
   r> next-symbol >r 1+
  repeat 
;

: dorel ( rel-adr -- ) 
  1+ dup c@ swap 1+ @ . . 
;

: load-rels ( index -- ) 
  " relations" section-adr dup :pointer @ >r :offset @ 
  begin dup 0 < if 2drop r> drop ;; then 
   2dup r + c@ = if dup r + dorel then 
   $relentry - 
  repeat
;

: load-functions ( -- ) 
  " libraries" section-adr :pointer @ >r 0
  begin 
   r count 0 = if r> 2drop ;; then 
   dup 0 > if dup r $2 swap dlopen libhandle ! load-rels then r> next-symbol >r 1+ 
  repeat
;

