100021 const GLU_INSIDE

| Declare list of variables
| : vars: begin token 2dup 1 = if c: ; swap c@ = if drop drop ;; then else drop then (create) postpone ; rcell allot repeat ;

variable top
variable bottom
variable height
variable tess

| Our quadric object pointer
variable cylinder
variable disc
0 cylinder !
0 disc !

: X 0 0 rot ;
: Y 0 swap 0 ;
: Z 0 0 ;
: fswap f> f> swap >f >f ;

: w>d i>>f 32 i>>f fswap f/ ;
: w>d> w>d f> ;
: @w>d @ w>d ;
: 3>f >r >r i>f  r> i>f  r> i>f ;
: 3>s >r >r w>d> r> w>d> r> w>d> ;

: By 3>s glTranslatef drop ;
| : Rot >r r * swap r * rot r * rot rot swap r> drop ;

: Rot >r 3>f r> i>f glRotatef drop ;

: RotX >r 1 X r> Rot ;


3.1415 fconst pi

: fconst : rliteral postpone >f postpone ; ;

: rad >f pi f* 180.0 >f fswap f/ f> ;

: f>d >f d> ;

: Begin dup glPushMatrix drop ;

: Default 32 top ! 32 bottom ! 32 height ! 10 tess ! ;
| could be factored out as
: Top top ! ;
: Bottom bottom ! ;
: Height height ! ;
: Tess tess ! ;
|

| (((float)(_r))/(cos(1.0f*M_PI/((float)(_t)))*2.0f))
: fcos fsincos fswap f> drop ;

| Fixes up the radius so the bounding area is the same, thus cylinder and box have the same width based on tesselation count
: w>fixup>f ( r-ptr -- d:fr ) @w>d pi tess @ i>>f fswap f/ fcos fswap f/ f>  ;
: w>fixup>d w>fixup>f f>d ;
: End glPopMatrix drop drop ;

| Draws a primitive
: Prim
    Begin
	finit
	1 Z 360 2 / tess @ / Rot 
|	-2 i>>f height @w>d f/ f> 0 0 glTranslatef drop
	
	1 tess @ height @w>d f> f>d top w>fixup>d bottom w>fixup>d cylinder @ gluCylinder drop

	GLU_FILL cylinder @ gluQuadricDrawStyle drop
	GLU_FLAT cylinder @ gluQuadricDrawStyle drop

	GLU_INSIDE disc @ gluQuadricOrientation drop

	2
	tess @
	bottom w>fixup>d
	0 f>d
	disc @ gluDisk drop
	
	height @w>d f> 0 0 glTranslatef drop
	2 tess @ top    w>fixup>d 0 f>d disc @ gluDisk drop
    End
    Default
;


: Cylinder ( radius height -- height )
    dup Top Bottom dup Height Prim
;

0 const p1
1 const p2
2 const p3
