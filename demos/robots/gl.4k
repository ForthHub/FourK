: fconst : rliteral postpone >f postpone ; ;
: i>>f i>f >f ;

| Let's bind some C library symbols



include" demos/robots/imph.4k"

: i>>f i>f >f ;


2 const SDL_OPENGL
 $40000000	const SDL_DOUBLEBUF	
 $80000000	const SDL_FULLSCREEN	


: libm " libm.so" lib ;
: libc " libc.so" lib ;
: libGL " /usr/lib/libGL.so" lib ;
: libglut " /usr/lib/libglut.so" lib ;
: libSDL " /usr/lib/libSDL.so" lib ;
| this for making happy my ans-loving Emacs mode ;) ( but I really like the | for a comment )
: \ postpone | ; immediate

: hdl ( lib cells -- ) >r sym r> rcells add-handle ;
: imports ( -- )
    libc " _exit" 1 hdl
    libGL " glClear"                 1 hdl
    libGL " glClearColor"            4 hdl
    libGL " glColorMaterial"         2 hdl
    libGL " glDisable"               1 hdl
    libGL " glEnable"                1 hdl
    libGL " glFrustum"               12 hdl
    libGL " glGetFloatv"             2 hdl
    libGL " glLightfv"               3 hdl
    libGL " glLoadIdentity"          0 hdl
    libGL " glMatrixMode"            1 hdl
    libGL " glPopMatrix"             0 hdl
    libGL " glPushMatrix"            0 hdl
    libGL " glRotatef"               4 hdl
    libGL " glScalef"                3 hdl
    libGL " glShadeModel"            1 hdl
    libGL " glTranslatef"            3 hdl
    libglut " gluCylinder"           9 hdl
    libglut " gluLookAt"             18 hdl
    libglut " gluNewQuadric"         0 hdl
    libSDL " SDL_GL_SwapBuffers"     0 hdl
    libSDL " SDL_PollEvent"          1 hdl
    libSDL " SDL_Quit"               0 hdl
    libSDL " SDL_SetVideoMode"       4 hdl
    libGL " glColor4ubv"            1 hdl
    libGL " glMaterialfv"            3 hdl
    libglut " gluQuadricDrawStyle"   2 hdl
    libglut " gluQuadricNormals"  2 hdl
    libglut " gluQuadricOrientation"  2 hdl
    libglut " gluDisk"  7 hdl
    libGL " glScalef"  3 hdl
    libglut " gluSphere"              5 hdl
    libGL " glBegin" 1 hdl
    libGL " glEnd" 0 hdl
    libGL " glVertex3i" 3 hdl
    libGL " glBlendFunc" 2 hdl
    libSDL " SDL_GetTicks" 0 hdl
    libc " malloc" 1 hdl
    libc " open" 3 hdl
    libc " ioctl"  3 hdl
    libc " write"  3 hdl
    libc " fopen" 2 hdl
    libc " fwrite" 4 hdl
    libc " fclose" 1 hdl
    libc " rand" 0 hdl
    libm " powf" 2 hdl
    libc " system" 1 hdl
    libGL " glReadPixels" 7 hdl
    libSDL " SDL_GetVideoSurface"       0 hdl
    libc " printf" 2 hdl
    libGL " glCreateShader" 1 hdl
    libGL " glShaderSource" 3 hdl
    libGL " glCompileShader" 1 hdl
    libGL " glCreateProgram" 0 hdl
    libGL " glAttachShader" 2 hdl
    libGL " glLinkProgram" 1 hdl
    libGL " glUseProgram" 1 hdl
;

\ some constants
 720 const width
 576 const height
 32  const bpp
| bpp 8 / const point

\ SDL constants
27  const Esc
2   const Keydown

\ SDL structure dispatch
: e>type c@ ;
: e>key 8 + c@ ;
: s>pixels 20 + @ ;

\ out screen surface
variable screen
\ allot needed stuff for SDL
create event 20 cells allot
\ and for pallete
create pallete 256 rcells allot

\ set the video mode
: video SDL_OPENGL (* SDL_FULLSCREEN or *) bpp height width SDL_SetVideoMode ;


| : main
|    video
|    render-loop
|    init-pallete
|    video screen !
|    draw
|    render-loop
    |    0 exit
|    SDL_Quit
| ;

| save-image im.4ki



| Some needed constants
100012 const GLU_FILL
$1D00 const  GLU_FLAT
$1D01 const  GL_SMOOTH
100000 const GLU_SMOOTH
$1D00 const GL_FLAT
$00000100 const GL_DEPTH_BUFFER_BIT			
$00004000 const GL_COLOR_BUFFER_BIT
$1700 const GL_MODELVIEW
$1701 const GL_PROJECTION
$0B50 const GL_LIGHTING
$4001 const GL_LIGHT1
$0BA1 const GL_NORMALIZE
$1602 const GL_AMBIENT_AND_DIFFUSE
$0408 const GL_FRONT_AND_BACK
$1600 const GL_EMISSION
$1201 const GL_DIFFUSE
$0B57 const GL_COLOR_MATERIAL
$1202 const GL_SPECULAR
$0B71 const GL_DEPTH_TEST
$0007 const GL_QUADS
$0BE2 const GL_BLEND
$0BE1 const GL_BLEND_SRC
$0BE0 const GL_BLEND_DST
$1 const					GL_ONE
$0 const					GL_ZERO
$303 const			GL_ONE_MINUS_SRC_ALPHA
$0302 const GL_SRC_ALPHA
$0304 const				GL_DST_ALPHA
$0308 const			GL_SRC_ALPHA_SATURATE
1203 const GL_POSITION

