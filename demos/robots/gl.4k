: fconst : rliteral postpone >f postpone ; ;
: i>>f i>f >f ;

| Let's bind some C library symbols



include" demos/robots/imph.4k"

: i>>f i>f >f ;


2 const SDL_OPENGL


: libm " libm.so" lib ;
: libc " libc.so" lib ;
: libGL " /usr/lib/libGL.so" lib ;
: libglut " /usr/lib/libglut.so" lib ;
: libSDL " /usr/lib/libSDL.so" lib ;
| this for making happy my ans-loving Emacs mode ;) ( but I really like the | for a comment )
: \ postpone | ; immediate

: hdl ( lib cells -- ) >r sym r> rcells add-handle ;
: imports ( -- )
    libc " _exit" 1 hdl
    libGL " glClear"                 1 hdl
    libGL " glClearColor"            4 hdl
    libGL " glColorMaterial"         2 hdl
    libGL " glDisable"               1 hdl
    libGL " glEnable"                1 hdl
    libGL " glFrustum"               12 hdl
    libGL " glGetFloatv"             2 hdl
    libGL " glLightfv"               3 hdl
    libGL " glLoadIdentity"          0 hdl
    libGL " glMatrixMode"            1 hdl
    libGL " glPopMatrix"             0 hdl
    libGL " glPushMatrix"            0 hdl
    libGL " glRotatef"               4 hdl
    libGL " glScalef"                3 hdl
    libGL " glShadeModel"            1 hdl
    libGL " glTranslatef"            3 hdl
    libglut " gluCylinder"           9 hdl
    libglut " gluLookAt"             18 hdl
    libglut " gluNewQuadric"         0 hdl
    libSDL " SDL_GL_SwapBuffers"     0 hdl
    libSDL " SDL_PollEvent"          1 hdl
    libSDL " SDL_Quit"               0 hdl
    libSDL " SDL_SetVideoMode"       4 hdl
    libGL " glColor4ubv"            1 hdl
    libGL " glMaterialfv"            3 hdl
    libglut " gluQuadricDrawStyle"   2 hdl
    libglut " gluQuadricNormals"  2 hdl
    libglut " gluQuadricOrientation"  2 hdl
    libglut " gluDisk"  7 hdl
    libGL " glScalef"  3 hdl
    libglut " gluSphere"              5 hdl
    libGL " glBegin" 1 hdl
    libGL " glEnd" 0 hdl
    libGL " glVertex3i" 3 hdl
    libGL " glBlendFunc" 2 hdl
    libc " fwrite" 4 hdl
    libc " fopen"  2 hdl
    libc " fclose" 1 hdl
    libc " rand"   0 hdl
    libm " powf"   2 hdl
    libc " system" 1 hdl
    libc " _exit"  1 hdl
;




\ some constants
 800 const width
 600 const height
 32  const bpp
| bpp 8 / const point

\ SDL constants
27  const Esc
2   const Keydown

\ SDL structure dispatch
: e>type c@ ;
: e>key 8 + c@ ;
: s>pixels 20 + @ ;

\ out screen surface
variable screen
\ allot needed stuff for SDL
create event 20 cells allot
\ and for pallete
create pallete 256 rcells allot

\ set the video mode
: video SDL_OPENGL bpp height width SDL_SetVideoMode ;


| : main
|    video
|    render-loop
|    init-pallete
|    video screen !
|    draw
|    render-loop
    |    0 exit
|    SDL_Quit
| ;

| save-image im.4ki



