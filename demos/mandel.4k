include src/bootstrap.4k


2 ccall: exit
3 ccall: SDL_SetVideoMode
4 ccall: SDL_PollEvent
5 ccall: SDL_Flip
6 ccall: SDL_LockSurface
7 ccall: SDL_UnlockSurface


: init ( -- )
    " libc.so" lib " _exit" sym rcell add-handle
    
    " /usr/lib/libSDL.so" lib " SDL_SetVideoMode" sym 4 rcells add-handle

    " /usr/lib/libSDL.so" lib " SDL_PollEvent" sym rcell add-handle

    " /usr/lib/libSDL.so" lib " SDL_Flip" sym rcell add-handle

    " /usr/lib/libSDL.so" lib " SDL_LockSurface" sym rcell add-handle

    " /usr/lib/libSDL.so" lib " SDL_UnlockSurface" sym rcell add-handle
;

: \ postpone | ; immediate
\ this for making happy my ans-loving Emacs mode ;) 

320 const width
200 const height
32  const bpp
bpp 8 / const point
27  const Esc
2   const Keydown

: e>type c@ ;
: e>key 8 + c@ ;
: s>pixels 20 + @ ;
variable screen
variable surface
create event 20 cells allot

: points point * ;
: pixel ( col x y -- ) width * + points screen @ s>pixels + !  ;

: video 0 bpp height width SDL_SetVideoMode ;

: y postpone j ; immediate
: x postpone i ; immediate

$00ff00 const green

variable iteration
variable x'
variable y'
variable cx
variable cy
100 const max-iter

\ : mandel
\     0.0 x' !
\     0.0 y' !
\     begin
\ 	iteration @ max-iter > if 0 ;; then
\ 	x' @ dup >f >f f*
\ 	y' @ dup >f >f f* f- cx @ >f f+
\ 	2 i>f x' @ >f y' @ >f f* f* cy @ >f f+ f> y' !
\ 	f> x' !
\ 	x' @ dup >f >r f* y' @ dup >r >f f* f+ f>i 100 >
\ 	if 1 ;; then
\     repeat
\ ;

: draw
\   height 0 do
 \      width 0 do
	    \	    finit
	    \	    x i>f width  i>f f/ 0.5 >f f- 3 i>f f* 0.7 >f f- f> cx !
	    \	    y i>f height i>f f/ 0.5 >f f- 3 i>f f* f> cy !
	    \	    mandel 0= invert if green x y pixel then
  \     loop
   \ loop
;
: a 10 0 do 10 0 do i . loop cr loop ;




\ : render-loop begin event SDL_PollEvent drop event e>type Keydown = if event e>key Esc = if ;; then then repeat ;

: main
    init
    video screen !
    screen @ SDL_LockSurface drop
    draw
    screen @ SDL_UnlockSurface drop
    screen @ SDL_Flip drop
 \   render-loop
    0 exit
;
