include src/bootstrap.4k
include src/debug.4k

2 ccall: exit
3 ccall: SDL_SetVideoMode
4 ccall: SDL_PollEvent
5 ccall: SDL_Flip
6 ccall: SDL_LockSurface
7 ccall: SDL_UnlockSurface


: init ( -- )
    " libc.so" lib " _exit" sym rcell add-handle
    
    " /usr/lib/libSDL.so" lib " SDL_SetVideoMode" sym 4 rcells add-handle

    " /usr/lib/libSDL.so" lib " SDL_PollEvent" sym rcell add-handle

    " /usr/lib/libSDL.so" lib " SDL_Flip" sym rcell add-handle

    " /usr/lib/libSDL.so" lib " SDL_LockSurface" sym rcell add-handle

    " /usr/lib/libSDL.so" lib " SDL_UnlockSurface" sym rcell add-handle
    
;

: \ postpone | ; immediate
\ this for making happy my ans-loving Emacs mode ;) 

\ SDL_CreateRGBSurfaceFrom(pixel, IMG_W, IMG_H, 32, 800*4, 0x0, 0x0, 0x0,0x0);
\  SDL_Surface* screen = SDL_SetVideoMode(IMG_W,IMG_H,32,0);
\  SDL_Surface* img = render();
\  SDL_BlitSurface(img, &screen_rect, screen, &screen_rect);
\  SDL_Flip(screen);
\  SDL_Event event;
\  do
\    {
\      SDL_PollEvent(&event);
\      if (event.type==SDL_KEYDOWN && event.key.keysym.sym == SDLK_ESCAPE ) break;
\    } while (1);
\  SDL_Quit();
\  
\  SDL_Quit();

320 const width
200 const height
32  const bpp
bpp 8 / const point
27  const Esc
2   const Keydown

: e>type c@ ;
: e>key 8 + c@ ;
: s>pixels 20 + @ ;
variable screen
variable surface
create event 20 cells allot

: points point * ;
: pixel ( col x y -- ) width * + points screen @ s>pixels + !  ;

: video 0 bpp height width SDL_SetVideoMode ;

: y postpone j ; immediate
: x postpone i ; immediate

$00ff00 const green

: draw height 0 do width 0 do green x y pixel loop loop ;
: render-loop begin event SDL_PollEvent drop event e>type Keydown = if event e>key Esc = if ;; then then repeat ;

: main
    init
    video screen !
    screen @ SDL_LockSurface drop
    draw
    screen @ SDL_UnlockSurface drop
    screen @ SDL_Flip drop
    render-loop
    0 exit
;

main




