include src/bootstrap.4k


2 ccall: exit
3 ccall: SDL_SetVideoMode
4 ccall: SDL_PollEvent
5 ccall: SDL_Flip
6 ccall: SDL_LockSurface
7 ccall: SDL_UnlockSurface


: init ( -- )
    " libc.so" lib " _exit" sym rcell add-handle
    
    " /usr/lib/libSDL.so" lib " SDL_SetVideoMode" sym 4 rcells add-handle

    " /usr/lib/libSDL.so" lib " SDL_PollEvent" sym rcell add-handle

    " /usr/lib/libSDL.so" lib " SDL_Flip" sym rcell add-handle

    " /usr/lib/libSDL.so" lib " SDL_LockSurface" sym rcell add-handle

    " /usr/lib/libSDL.so" lib " SDL_UnlockSurface" sym rcell add-handle
;

: \ postpone | ; immediate
\ this for making happy my ans-loving Emacs mode ;) 

320 const width
200 const height
32  const bpp
bpp 8 / const point
27  const Esc
2   const Keydown

: e>type c@ ;
: e>key 8 + c@ ;
: s>pixels 20 + @ ;
variable screen
variable surface
create event 20 cells allot

: points point * ;
: pixel ( col x y -- ) width * + points screen @ s>pixels + !  ;

: video 0 bpp height width SDL_SetVideoMode ;

: y postpone j ; immediate
: x postpone i ; immediate

$0000ff const green

variable iteration
variable x'
variable y'
variable cx
variable cy
100 const max-iter


: sqr dup * ;

width sqr height sqr + i>f >f fsqrt f> const max
: fsin fsincos f> drop ;

variable time
1.0 time !
: draw
    height 0 do
	width 0 do

	    | finit time @ >f fsin y x + i>f 0.1 >f f* f+ fsincos f* x i>f >f 0.1 >f f* fsin f+ 2.0  >f f+ 64.0 >f f* f> f>i x y pixel
    time @ >f 255.0 >f f* f> f>i x y pixel
	    |	    finit
	    |	    x i>f width  i>f f/ 0.5 >f f- 3 i>f f* 0.7 >f f- f> cx !
	    |	    y i>f height i>f f/ 0.5 >f f- 3 i>f f* f> cy !
	    |	    mandel 0= invert if green x y pixel then
	loop
    loop
	    
	    0.01 >f time @ >f f+ f> time !
;

: draw'
    screen @ SDL_LockSurface drop
    draw
    screen @ SDL_UnlockSurface drop
    screen @ SDL_Flip drop
;

: render-loop begin draw' event SDL_PollEvent drop event e>type Keydown = if event e>key Esc = if ;; then then repeat ;


: main
    init
    video screen !
    render-loop
    0 exit
;
