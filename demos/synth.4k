| require" src/strings.4k"
forget
mark
4 #ithere !
: fconst : rliteral postpone >f postpone ; ;

| Let's bind some C library symbols
2 ccall: exit
3 ccall: malloc | should be in bss section
4 ccall: printf
5 ccall: fopen
6 ccall: fwrite
7 ccall: fclose
8 ccall: system
9 ccall: rand
(*
5 ccall: open
6 ccall: ioctl
7 ccall: write
*)
2147483647 const rand-max 
44100 const sample/second

44100 4 * const #samples

2 const sample-size

: samples sample-size * ;

variable buffer
variable audio
variable temp
: w! 2dup c! swap 8 >> swap 1+ c! ;

: #sample! samples buffer @ + w! ;


(*
PLAYERWAVE mywave={'R','I','F','F',
		   sizeof(PLAYERWAVE)+NUMSAMPLES*2,
		   'W','A','V','E','f','m','t',' ',
		   0x10,1,1,
		   PLAYFREQ,
		   PLAYFREQ*2,
		   2,16,'d','a','t','a',
		   SAMPLESIZE,{0}
};
*)

variable stream
variable temp
: >file ( str c -- file ) >r >r stream @ 1 r> r> swap fwrite drop  ;
: i>file temp ! temp 4 >file ;
: s>file temp ! temp 2 >file ;
: file: ( str c -- file ) >cstr " wb" >cstr swap fopen stream ! ;
: file; stream @ fclose ;

52 #samples 2 * + const wav-size

: >whdr
    " RIFF" >file
    wav-size i>file
    " WAVEfmt " >file
    16 i>file
    1 s>file
    1 s>file
    44100 i>file
    44100 2 * i>file
    2 s>file
    16 s>file
    " data" >file
    #samples 2 * i>file
;

: dupf f> dup >f >f ;
: dupf> f> dup >f ;
: dropf f> drop ;
: fswap f> f> swap >f >f ;

| our sin (or cos I dunno) function
: fcos fsincos fswap f> drop ;
: frot f> f> f> rot >f >f >f ;

( f: a b -> b a -> b a a -> a b a )
: fover f> f> dup rot rot >f >f >f ;

: ffrac dupf frnd fswap f- ;
: fmod dupf frot fswap f/ ffrac f* ;
: i>>f i>f >f ;
: f>>i f> f>i ;

: frand ( -- f: -1..1 ) rand i>>f rand-max i>>f fswap f/ 2 i>>f f* 1 i>>f f- ;

| some pimped sin function which keeps value 
: sin fcos 32000 i>>f f* ;


3.1415 2.0 >f >f f* f> fconst pi2
44100.0 fconst fr


variable sample

: +1! 1 swap +! ;

1 const bpm

1 i>>f bpm i>>f fswap f/ f> fconst frame

: Tf sample @ i>>f #samples i>>f fswap f/ 15 i>>f f* ;
variable accum
: Osc ( f: amp-in  pitch-in  freq-in -- f: out ) Tf fr f* pi2 f* f* f+ fcos f* ;
: Lfo ( f: freq-in -- f: out ) Tf pi2 f* f* fcos ;
: Out 20000 i>>f f* f>>i ;
: IConst i>>f ;
: IConst2 swap i>>f i>>f ;
: FConst >f ;
: fl> flt ;
: fl< fl> invert ;
: Mul ( f: in val -- out ) f* ;
: SimpleOsc f> 1 IConst 1 IConst >f Osc ;

: Clamp ( f: in -- cut ) dupf 1 i>>f fl> if dropf 1 i>>f ;; then dupf -1 i>>f fl< if dropf -1 i>>f ;; then ;

0.0 accum !
: Pitch accum @ >f f+ dupf f> accum ! ;
    
: Sr ( f: S - v )
    dupf Tf fl< if dupf 1.0 >f f- fswap Tf f- f/ 1 i>>f f- ;; then
    Tf f/
;

: Sr2 ( f: S - v )
    dupf Tf fl< if dupf 1.0 >f f- fswap Tf f- f/ 1 i>>f f- ;; then
    dropf 1.0 >f
;

: Noise frand ;

: BassDrum
    	0.5 FConst Sr2 2 IConst Mul         | Amplitude Envelope
	0.5 FConst Sr Pitch 0.02 FConst Mul | Frequency Modulation
	20 IConst                           | Pitch
	Osc Clamp
;

: HiHat Noise 0.2 FConst Sr2 Mul 2 IConst Mul ;
: Add f+ ;

: Chorus 440 IConst SimpleOsc 220 IConst SimpleOsc Add 100 IConst SimpleOsc 200 Add IConst SimpleOsc Add 0.25 FConst Mul ;

: sound
    " test.wav" file:
    >whdr
    0 sample !
    #samples 0
    do
	finit
	Tf 1.0 >f fl> if 0 sample ! then
	dup execute
	Out
	s>file
	sample +1!
    loop
    file;
;

: init ( -- )
    " libc.so" lib " _exit" sym rcell add-handle
    " libc.so" lib " malloc" sym rcell add-handle
    " libc.so" lib " printf" sym 2 rcells add-handle
    " libc.so" lib " fopen" sym 2 rcells add-handle
    " libc.so" lib " fwrite" sym 4 rcells add-handle
    " libc.so" lib " fclose" sym  rcell add-handle
    " libc.so" lib " system" sym  rcell add-handle
    " libc.so" lib " rand" sym  0 add-handle | need to think about something better
;


: main
    init
    " BassDrum" find sound
    " play test.wav" >cstr system
|    0 exit
|    begin
|	render-noise
 |   again
;

main

