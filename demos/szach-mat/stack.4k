\ FourK - Concatenative, stack based, Forth like language optimised for 
\        non-interactive 4KB size demoscene presentations.

\ Copyright (C) 2009, 2010 Wojciech Meyer, Josef P. Bernhart

\ This program is free software: you can redistribute it and/or modify
\ it under the terms of the GNU General Public License as published by
\ the Free Software Foundation, either version 3 of the License, or
\ (at your option) any later version.

\ This program is distributed in the hope that it will be useful,
\ but WITHOUT ANY WARRANTY; without even the implied warranty of
\ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
\ GNU General Public License for more details.

\ You should have received a copy of the GNU General Public License
\ along with this program.  If not, see <http://www.gnu.org/licenses/>.
100021 const GLU_INSIDE

: fswap f> f> swap >f >f ;

| Declare list of variables
| : vars: begin token 2dup 1 = if c: ; swap c@ = if drop drop ;; then else drop then (create) postpone ; cell allot repeat ;

variable top
variable bottom
variable height
variable tess
variable color
variable scale
variable pp1
variable pp2
variable color
variable flat
| Our quadric object pointer
variable cylinder
variable disc
0 cylinder !
0 disc !

: X 0 0 rot ;
: Y 0 swap 0 ;
: Z 0 0 ;

: w>d i>>f 32 i>>f fswap f/ ;
: w>d> w>d f> ;
: @w>d @ w>d ;
: 3>f >r >r i>f  r> i>f  r> i>f ;
: 3>s >r >r w>d> r> w>d> r> w>d> ;

: By 3>s glTranslatef drop ;
| : Rot >r r * swap r * rot r * rot rot swap r> drop ;

: Rot glRotatef drop ;

: FRotX >r 1 X 3>f r> Rot ;
: RotX >r 1 X 3>f r> i>f Rot ;

: Color color ! ;

3.1415 fconst pi

: fconst : rliteral postpone >f postpone ; ;

: rad >f pi f* 180.0 >f fswap f/ f> ;

: f>d >f d> ;

: Begin dup glPushMatrix drop ;

: Default 32 top ! 32 bottom ! 32 height ! 10 tess ! 32 scale ! ;
| could be factored out as
: Top top ! ;
: Bottom bottom ! ;
: Height height ! ;
: Tess tess ! ;
: Scale scale ! ;
|

| (((float)(_r))/(cos(1.0f*M_PI/((float)(_t)))*2.0f))
: fcos fsincos fswap f> drop ;

| Fixes up the radius so the bounding area is the same, thus cylinder and box have the same width based on tesselation count
: w>fixup>f ( r-ptr -- d:fr ) @w>d pi tess @ i>>f fswap f/ fcos fswap f/ f>  ;
: w>fixup>d w>fixup>f f>d ;
: End drop glPopMatrix drop  ;

: let-there-be-light
    GL_DEPTH_TEST glEnable drop
    GL_LIGHT1 glEnable drop
    GL_LIGHTING glEnable drop
 |    GL_CULL_FACE glDisable drop
    GL_SMOOTH glShadeModel drop
    | GL_FLAT glShadeModel drop
    light GL_DIFFUSE GL_LIGHT1 glLightfv drop
    light_s GL_SPECULAR GL_LIGHT1 glLightfv drop
    light_pos GL_POSITION GL_LIGHT1 glLightfv drop
    GL_COLOR_MATERIAL glEnable drop
    GL_NORMALIZE glEnable drop
    GL_AMBIENT_AND_DIFFUSE GL_FRONT_AND_BACK glColorMaterial drop
    solid GL_SPECULAR GL_FRONT_AND_BACK glMaterialfv drop
    solid2 GL_EMISSION GL_FRONT_AND_BACK glMaterialfv drop
;

: Prim0
    Begin
	finit
	1 i>f scale @ w>d> 1 i>f glScalef drop
	1 i>f Z 360 2 / tess @ / i>f Rot
    | |	-2 i>>f height @w>d f/ f> 0 0 glTranslatef drop
|	tess @ 4 = if 
|	    GLU_FLAT cylinder @ gluQuadricDrawStyle drop
	    GL_FLAT glShadeModel drop
|	else
|	    GLU_SMOOTH cylinder @ gluQuadricNormals drop
|	    GL_FLAT glShadeModel drop
|	then
	let-there-be-light    
    ;

 : Prim1
     
     GLU_FILL cylinder @ gluQuadricDrawStyle drop
     
     | GLU_SMOOTH cylinder @ gluQuadricNormals drop
    | GLU_INSIDE disc @ gluQuadricOrientation drop
    
     2
     tess @
     bottom w>fixup>d
     0 f>d
     disc @ gluDisk drop
	
	height @w>d f> 0 0 glTranslatef drop
     2 tess @ top    w>fixup>d 0 f>d disc @ gluDisk drop
 ;
: Prim2
	End
	height @ 
	Default
;
| Draws a primitive
: Prim
    color @ glColor4ubv drop
    height @ pp2 @ * -2 / w>d> 0 0 glTranslatef drop
    Prim0
	1 tess @ height @w>d f> f>d top w>fixup>d bottom w>fixup>d cylinder @ gluCylinder drop
    Prim1
    Prim2
;

: Sphere
    color @ glColor4ubv drop
    height @ pp2 @ * -2 / w>d> 0 0 glTranslatef drop
    Prim0
    tess @ tess @ height @w>d f> f>d cylinder @ gluSphere drop
    Prim2
;

: Size dup Top Bottom ;

| : Cylinder ( radius height -- height )
|    dup Top Bottom dup Height Prim
| ;

0 const p1
1 const p2
2 const p3

: RotY >r 1 Y 3>f r> i>f Rot ;
: RotZ >r 1 Z 3>f r> i>f Rot ;

: Join ( p1 p2 -- )
    pp2 ! pp1 !
    | pp1 @ pp2 @ >r * 2 / r> height @ * -2 / + w>d> 0 0 glTranslatef drop
    pp1 @ * 2 / w>d> 0 0 glTranslatef drop
    | 64 w>d f> 0 0 glTranslatef drop
;


: Cylinder Size Height Prim ;

